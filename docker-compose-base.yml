version: "2"
services:

  redis:
    container_name: redis
    image: redis
    ports: #6379
      - 6379:6379

  dockermongo:
    container_name: dockermongo
    image: mongo:4.0
    ports:
       - 27017:27017
    volumes:
      - /mnt/datavolumedocker/data/mongo:/data/db
    environment:
      - AWESOME_NUMBER=42

  dockergres:
     container_name: dockergres
     build: ./bevrand.dataseeder/db
     image: "bevrand/dockergres:${CIRCLE_SHA1}"
     ports:
       - 5434:5432
     volumes:
      - /mnt/datavolumedocker/data/postgres:/var/lib/postgresql/data
     environment:
       - POSTGRES_PASSWORD=postgres
       - POSTGRES_USER=postgres

  authenticationapi:
    container_name: authenticationapi
    build: ./bevrand.authenticationapi/bevrand.authenticationapi
    image: "bevrand/authenticationapi:${CIRCLE_SHA1}"
    ports:
      - 4570:5000
    depends_on:
      - dockergres
      - jaeger-agent
    environment:
      - ASPNETCORE_ENVIRONMENT="Development"
      - JAEGER_AGENT_HOST=jaeger-agent
      - JAEGER_AGENT_PORT=6831

  highscoreapi:
    container_name: highscoreapi
    build: ./bevrand.highscoreapi
    image: "bevrand/highscoreapi:${CIRCLE_SHA1}"
    environment:
      - GO_ENV=docker
      - GIN_MODE=release
      - RABBIT_URL=amqp://rabbitmq:rabbitmq@rabbitmq:5672/
      - JAEGER_AGENT_HOST=jaeger-agent
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - redis
      - rabbitmq
      - jaeger-agent
    ports:
      - 4580:5000

  multivuerse:
    container_name: multivuerse
    build: ./bevrand.multivuerse
    image: "bevrand/multivuerse:${CIRCLE_SHA1}"
    depends_on:
    - proxyapi
    environment:
    - NODE_ENV=production
    ports:
    - 3001:3000

  randomizerapi:
    container_name: randomizerapi
    build: ./bevrand.randomizerapi
    image: "bevrand/randomizerapi:${CIRCLE_SHA1}"
    ports:
       - 4560:5000 # expose ports - HOST:CONTAINER
    depends_on:
       - jaeger-agent
       - rabbitmq
    environment:
       - JAEGER_AGENT_HOST=jaeger-agent
       - JAEGER_AGENT_PORT=6831
       - RABBIT_URL=amqp://rabbitmq:rabbitmq@rabbitmq:5672/

  playlistapi:
    container_name: playlistapi
    build: ./bevrand.playlistapi
    image: "bevrand/playlistapi:${CIRCLE_SHA1}"
    ports:
       - 4550:5000  # expose ports - HOST:CONTAINER
    depends_on:
       - dockermongo
       - jaeger-agent
    environment:
       - APP_SETTINGS=Production
       - MONGO_URL=mongodb://dockermongo:27017/admin
       - JAEGER_AGENT_HOST=jaeger-agent
       - JAEGER_AGENT_PORT=6831

  ocrapi:
    container_name: ocrapi
    build: ./bevrand.ocrapi
    image: "bevrand/ocrapi:${CIRCLE_SHA1}"
    ports:
       - 4600:5000  # expose ports - HOST:CONTAINER

  proxyapi:
    container_name: proxyapi
    build: ./bevrand.proxyapi
    image: "bevrand/proxyapi:${CIRCLE_SHA1}"
    ports:
      - 4540:5000
    environment:
      - NODE_ENV=development
      - JAEGER_AGENT_HOST=jaeger-agent
      - JAEGER_AGENT_PORT=6831

  recommendationapi:
    container_name: recommendationapi
    build: ./bevrand.recommendationapi
    image: "bevrand/recommendationapi:${CIRCLE_SHA1}"
    ports:
      - 4590:5000
    depends_on:
      - proxyapi
      - neo4j
      - jaeger-agent
    environment:
      - GO_ENV=docker

  dataseeder:
    container_name: dataseeder
    build: ./bevrand.dataseeder
    image: "bevrand/dataseeder:${CIRCLE_SHA1}"
    depends_on:
       - dockermongo
       - dockergres
    links:
       - dockermongo
       - dockergres
    environment:
       - MONGO_URL=mongodb://dockermongo:27017/admin

  componenttest:
    container_name: component_tests
    build: ./bevrand.componenttests
    image: "bevrand/componenttests:${CIRCLE_SHA1}"
    depends_on:
    - randomizerapi
    - playlistapi
    - authenticationapi
    - proxyapi
    - highscoreapi
    - recommendationapi
    - dataseeder
    environment:
    - PYTHON_ENV=Test
    command: tail -f /dev/null

  systemtest:
    container_name: system_tests
    build: ./bevrand.systemtests
    image: "bevrand/systemtests:${CIRCLE_SHA1}"
    depends_on:
    - randomizerapi
    - playlistapi
    - authenticationapi
    - proxyapi
    - highscoreapi
    - recommendationapi
    - dataseeder
    environment:
    - RUBY_ENV=Docker
    command: tail -f /dev/null

  rabbitmq:
    image: "rabbitmq:3.7-alpine"
    container_name: rabbitmq
    environment:
      # RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbitmq
      - RABBITMQ_DEFAULT_VHOST=/
    ports:
      - "15672:15672"
      - "5672:5672"

  els:
    image: "bevrand/dockerels:$CIRCLE_SHA1"
    build: ./deployment/els
    restart: always
    hostname: els
    environment:
    - cluster.name=docker-cluster
    - bootstrap.memory_lock=true
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
    - 9200:9200

  kibana:
    image: docker.elastic.co/kibana/kibana:6.0.0
    ports:
    - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://els:9200
    depends_on:
    - els

  jaeger-collector-els:
    image: jaegertracing/jaeger-collector:latest
    environment:
    - SPAN_STORAGE_TYPE=elasticsearch
    ports:
    - "14267:14267"
    - "14268:14268"
    - "9411:9411"
    depends_on:
    - els
    hostname: jaeger-collector
    restart: unless-stopped
    command: ["--span-storage.type=elasticsearch", "--es.server-urls=http://els:9200"]

  jaeger-agent-els:
    image: jaegertracing/jaeger-agent:latest
    environment:
    - SPAN_STORAGE_TYPE=elasticsearch
    ports:
    - "5775:5775/udp"
    - "5778:5778"
    - "6831:6831/udp"
    - "6832:6832/udp"
    depends_on:
    - els
    - jaeger-collector
    restart: unless-stopped
    hostname: jaeger-agent
    command: ["--collector.host-port=jaeger-collector:14267"]

  jaeger-query-els:
    image: jaegertracing/jaeger-query:latest
    ports:
    - 16686:16686
    environment:
    - SPAN_STORAGE_TYPE=elasticsearch
    depends_on:
    - els
    - jaeger-collector
    restart: unless-stopped
    hostname: jaeger-query
    command: ["--span-storage.type=elasticsearch", "--es.server-urls=http://els:9200", "--es.sniffer=false"]

  jaeger-collector-cas:
      image: jaegertracing/jaeger-collector
      command: ["--cassandra.keyspace=jaeger_v1_dc1", "--cassandra.servers=cassandra", "--collector.zipkin.http-port=9411"]
      ports:
        - "14269"
        - "14268:14268"
        - "14267"
        - "9411:9411"
      restart: on-failure
      depends_on:
        - cassandra-schema

  jaeger-query-cas:
      image: jaegertracing/jaeger-query
      command: ["--cassandra.keyspace=jaeger_v1_dc1", "--cassandra.servers=cassandra"]
      ports:
        - "16686:16686"
        - "16687"
      restart: on-failure
      depends_on:
        - cassandra-schema

  jaeger-agent-cas:
      image: jaegertracing/jaeger-agent
      command: ["--collector.host-port=jaeger-collector:14267"]
      ports:
        - "5775:5775/udp"
        - "6831:6831/udp"
        - "6832:6832/udp"
        - "5778:5778"
      restart: on-failure
      depends_on:
        - jaeger-collector

  cassandra:
      image: cassandra:3.9

  cassandra-schema:
      image: jaegertracing/jaeger-cassandra-schema
      depends_on:
        - cassandra

  dockernginx:
    container_name: dockernginx
    image: "bevrand/dockernginx:${CIRCLE_SHA1}"
    build: ./deployment/nginx
    depends_on:
    - proxyapi
    - multivuerse
    ports:
      - "80:5000"

  neo4j:
    container_name: neo4j
    image: "bevrand/dockerneo:${CIRCLE_SHA1}"
    build: ./deployment/neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
