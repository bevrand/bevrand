version: 2

jobs:
  unittest_playlist:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout 
      - run: "cd ./bevrand.playlistapi && sudo pip install -r requirements.txt"
      - run: "cd ./bevrand.playlistapi/api/tests && sudo pytest --cov-report term --cov=api"

  unittest_proxy:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run: "cd ./bevrand.proxyapi && npm install"
      - run: "cd ./bevrand.proxyapi && npm test"

  unittest_randomizer:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout
      - run: "cd ./bevrand.randomizerapi && sudo pip install -r requirements.txt"
      - run: "cd ./bevrand.randomizerapi/api/tests && sudo pytest --cov-report term --cov=api"

  unittest_authentication:
    docker:
      - image: microsoft/dotnet:2-sdk
    steps:
      - checkout
      - run: "cd bevrand.authenticationapi/bevrand.authenticationapi.tests && dotnet test"

  unittest_highscore:
    docker:
    - image: circleci/golang:1.11
    steps:
      - checkout
      - run: "cd ./bevrand.highscoreapi && go test"

  build_python:
    machine: true
    steps:
      - checkout
     # build the application image
      - run: |
         docker build -t bevrand/playlistapi:$CIRCLE_SHA1 ./bevrand.playlistapi
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker push bevrand/playlistapi:$CIRCLE_SHA1
      - run: |
         docker build -t bevrand/randomizerapi:$CIRCLE_SHA1 ./bevrand.randomizerapi
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker push bevrand/randomizerapi:$CIRCLE_SHA1
      - run: |
         docker build -t bevrand/componenttests:$CIRCLE_SHA1 ./bevrand.componenttests
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker push bevrand/componenttests:$CIRCLE_SHA1
      - run: |
         docker build -t bevrand/dataseeder:$CIRCLE_SHA1 ./bevrand.dataseeder
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker push bevrand/dataseeder:$CIRCLE_SHA1

  build_node:
    machine: true
    steps:
      - checkout
     # build the application image
      - run: |
         docker build -t bevrand/proxyapi:$CIRCLE_SHA1 ./bevrand.proxyapi
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker push bevrand/proxyapi:$CIRCLE_SHA1

  build_frontend:
    machine: true
    steps:
      - checkout
     # build the application image
      - run: |
         docker build -t bevrand/frontend:$CIRCLE_SHA1 ./bevrand.frontend
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker push bevrand/frontend:$CIRCLE_SHA1
      - run: |
          docker build -t bevrand/dockernginx:$CIRCLE_SHA1 ./deployment/nginx
          docker login -u $DOCKERUSER -p $DOCKERPASSWORD
          docker push bevrand/dockernginx:$CIRCLE_SHA1

  build_els:
    machine: true
    steps:
    - checkout
    # build the application image
    - run: |
        docker build -t bevrand/dockerels:$CIRCLE_SHA1 ./deployment/els
        docker login -u $DOCKERUSER -p $DOCKERPASSWORD
        docker push bevrand/dockerels:$CIRCLE_SHA1
  
  build_dotnet:
    machine: true
    steps:
      - checkout
     # build the application image
      - run: |
         docker build -t bevrand/authenticationapi:$CIRCLE_SHA1 ./bevrand.authenticationapi/bevrand.authenticationapi
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker push bevrand/authenticationapi:$CIRCLE_SHA1

  build_golang:
    machine: true
    steps:
      - checkout
     # build the application image
      - run: |
         docker build -t bevrand/highscoreapi:$CIRCLE_SHA1 ./bevrand.highscoreapi
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker push bevrand/highscoreapi:$CIRCLE_SHA1

  build_dockergres:
    machine: true
    steps:
      - checkout
     # build the application image
      - run: |
         docker build -t bevrand/dockergres:$CIRCLE_SHA1 ./bevrand.dataseeder/db
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker push bevrand/dockergres:$CIRCLE_SHA1

  component_tests:
    machine: true
    steps:
      - checkout
     # build the application image
      - run: |
         pip install PyYAML
         python create_docker_compose.py --profile component-tests
         docker-compose --version
         docker-compose -f ./docker-compose-created.yml up -d
         docker images
         docker ps -a
     
     #verify the results of the component test
      - run: "cd ./deployment && python validate_backend_test_results.py"
  
  ui_tests:
    machine: true
    parallelism: 1
    steps:
      - checkout
     # build the application image
      - run: |
         pip install PyYAML
         python create_docker_compose.py --profile ui-tests
         docker-compose --version
         docker-compose -f ./docker-compose-created.yml up -d
         docker images
         docker ps -a
      #run ui_tests
      - run: "cd ./bevrand.uitests && npm install --save-dev"
      - run: "cd /home/circleci/project"

      - run:
          name: Running E2E tests with Multiple reporters
          command: "cd ./bevrand.uitests && npm run test-multiple"
      - store_test_results:
          path: multiple-results
      - store_artifacts:
          path: /home/circleci/project/bevrand.uitests/cypress/videos/
      - store_artifacts:
          path: /home/circleci/project/bevrand.uitests/cypress/screenshots/

  create_production_images:
    machine: true
    steps:
      - checkout
     # build the application image
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/playlistapi:$CIRCLE_SHA1
         docker tag bevrand/playlistapi:$CIRCLE_SHA1 bevrand/playlistapi:production
         docker push bevrand/playlistapi:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/proxyapi:$CIRCLE_SHA1
         docker tag bevrand/proxyapi:$CIRCLE_SHA1 bevrand/proxyapi:production
         docker push bevrand/proxyapi:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/randomizerapi:$CIRCLE_SHA1
         docker tag bevrand/randomizerapi:$CIRCLE_SHA1 bevrand/randomizerapi:production
         docker push bevrand/randomizerapi:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/authenticationapi:$CIRCLE_SHA1
         docker tag bevrand/authenticationapi:$CIRCLE_SHA1 bevrand/authenticationapi:production
         docker push bevrand/authenticationapi:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/highscoreapi:$CIRCLE_SHA1
         docker tag bevrand/highscoreapi:$CIRCLE_SHA1 bevrand/highscoreapi:production
         docker push bevrand/highscoreapi:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/dockergres:$CIRCLE_SHA1
         docker tag bevrand/dockergres:$CIRCLE_SHA1 bevrand/dockergres:production
         docker push bevrand/dockergres:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/frontend:$CIRCLE_SHA1
         docker tag bevrand/frontend:$CIRCLE_SHA1 bevrand/frontend:production
         docker push bevrand/frontend:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/dockerels:$CIRCLE_SHA1
         docker tag bevrand/dockerels:$CIRCLE_SHA1 bevrand/dockerels:production
         docker push bevrand/dockerels:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/dockernginx:$CIRCLE_SHA1
         docker tag bevrand/dockernginx:$CIRCLE_SHA1 bevrand/dockernginx:production
         docker push bevrand/dockernginx:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/dataseeder:$CIRCLE_SHA1
         docker tag bevrand/dataseeder:$CIRCLE_SHA1 bevrand/dataseeder:production
         docker push bevrand/dataseeder:production
      - run: |
         docker login -u $DOCKERUSER -p $DOCKERPASSWORD
         docker pull bevrand/componenttests:$CIRCLE_SHA1
         docker tag bevrand/componenttests:$CIRCLE_SHA1 bevrand/componenttests:production
         docker push bevrand/componenttests:production

  pause_uptimerobot:
    machine: true
    steps:
     - run: "curl -X POST -H \"Cache-Control: no-cache\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"api_key=$UptimeRobotApiKey&format=json&id=780479363&status=0\" \"https://api.uptimerobot.com/v2/editMonitor\" && curl -X POST -H \"Cache-Control: no-cache\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"api_key=$UptimeRobotApiKey&format=json&id=780479359&status=0\" \"https://api.uptimerobot.com/v2/editMonitor\" && curl -X POST -H \"Cache-Control: no-cache\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"api_key=$UptimeRobotApiKey&format=json&id=780460902&status=0\" \"https://api.uptimerobot.com/v2/editMonitor\" && curl -X POST -H \"Cache-Control: no-cache\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"api_key=$UptimeRobotApiKey&format=json&id=780460904&status=0\" \"https://api.uptimerobot.com/v2/editMonitor\""
 
  deploy:
    machine: true
    steps:
     - checkout
     - run: "pwd && ls -lha"
     - run: "cd ./deployment && sh ./init_terraform.sh"
     - run: "cd ./deployment/terraform_scripts && pwd && ls -lha && sh ../run_terraform.sh"
  
  resume_uptimerobot:
    machine: true
    steps:
     - run: "curl -X POST -H \"Cache-Control: no-cache\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"api_key=$UptimeRobotApiKey&format=json&id=780479363&status=1\" \"https://api.uptimerobot.com/v2/editMonitor\" && curl -X POST -H \"Cache-Control: no-cache\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"api_key=$UptimeRobotApiKey&format=json&id=780479359&status=1\" \"https://api.uptimerobot.com/v2/editMonitor\" && curl -X POST -H \"Cache-Control: no-cache\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"api_key=$UptimeRobotApiKey&format=json&id=780460902&status=1\" \"https://api.uptimerobot.com/v2/editMonitor\" && curl -X POST -H \"Cache-Control: no-cache\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"api_key=$UptimeRobotApiKey&format=json&id=780460904&status=1\" \"https://api.uptimerobot.com/v2/editMonitor\""

workflows:
  version: 2
  build_accept_deploy:
    jobs:
     - unittest_randomizer:
        context: BeverageRandomizerPROD
     - unittest_proxy:
        context: BeverageRandomizerPROD
     - unittest_playlist:
        context: BeverageRandomizerPROD
     - unittest_authentication:
        context: BeverageRandomizerPROD
     - unittest_highscore:
        context: BeverageRandomizerPROD

     - build_python:
        context: BeverageRandomizerPROD
        requires:
          - unittest_randomizer
          - unittest_playlist
     - build_node:
        context: BeverageRandomizerPROD
        requires:
          - unittest_proxy
     - build_dotnet:
        context: BeverageRandomizerPROD
        requires:
          - unittest_authentication
     - build_golang:
         context: BeverageRandomizerPROD
         requires:
          - unittest_highscore
     - build_dockergres:
         context: BeverageRandomizerPROD
         requires:
          - unittest_authentication
     - build_frontend:
         context: BeverageRandomizerPROD
         requires:
          - unittest_proxy
     - build_els:
         context: BeverageRandomizerPROD
         requires:
         - unittest_proxy
     - component_tests:
         context: BeverageRandomizerPROD
         requires:
           - build_python
           - build_node
           - build_dotnet
           - build_golang
           - build_dockergres
           - build_frontend
           - build_els
     - ui_tests:
          context: BeverageRandomizerPROD
          requires:
           - build_python
           - build_node
           - build_dotnet
           - build_golang
           - build_dockergres
           - build_frontend
           - build_els
          filters:
            branches:
              only:
              - master
              - develop
     #TODO Sonar-scanner
     #- acceptance_test_1:
     #    requires:
     #      - ui_tests
     - create_production_images:
          context: BeverageRandomizerPROD
          filters:
             branches:
               only:
               - master
          requires:
            - ui_tests
            - component_tests
     - pause_uptimerobot:
         context: BeverageRandomizerPROD
         filters:
            branches:
              only: master
         requires:
           - create_production_images
     - deploy:
         #TODO Get from artifacts
         context: BeverageRandomizerPROD
         filters:
            branches:
              only: master
         requires:
           #- acceptance_test_1
           - pause_uptimerobot
     - resume_uptimerobot:
         context: BeverageRandomizerPROD
         filters:
            branches:
              only: master
         requires:
           - deploy
         
